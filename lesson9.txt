A collection allows us to put many values in a single “variable”

for i in [5, 4, 3, 2, 1] :
    print(i)
print('Blastoff!')


Strings are “immutable” - we cannot change the contents of a string - we must make a new string to make any change
Lists are “mutable” - we can change an element of a list using the index operator


 >>>print(range(4))
[0, 1, 2, 3]
>>> friends = ['Joseph', 'Glenn', 'Sally']
>>> print(len(friends))
3
>>> print(range(len(friends)))
[0, 1, 2]
>>> 


concatenating

>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = a + b
>>> print(c)
[1, 2, 3, 4, 5, 6]
>>> print(a)
[1, 2, 3]

slicing

>>> t = [9, 41, 12, 3, 74, 15]
>>> t[1:3]
[41,12]
>>> t[:4]
[9, 41, 12, 3]
>>> t[3:]
[3, 74, 15]
>>> t[:]
[9, 41, 12, 3, 74, 15]


>>> some = [1, 9, 21, 10, 16]
>>> 9 in some
True
>>> 15 in some
False
>>> 20 not in some
True
>>> 


>>> friends = [ 'Joseph', 'Glenn', 'Sally' ]
>>> friends.sort()
>>> print(friends)


>>> nums = [3, 41, 12, 9, 74, 15]
>>> print(len(nums))
6
>>> print(max(nums))
74
>>> print(min(nums))
3
>>> print(sum(nums))
154
>>> print(sum(nums)/len(nums))
25.6
=========================
List Methods

sort
reverse
list.append(89766)
pop() or pop(0)
del List[0] 
List.insert(2, 10087) 
list.remove(element)

List1.extend(List2) 

List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1] 
print(List.count(1)) 

List.index(6474)
==============================
Best Friends: Strings and Lists
Split breaks a string into parts and produces a list of strings.  We think of these as words.  We can access a particular word or loop through all the words.
split('delimiter')


>>> abc = 'With three words'
>>> stuff = abc.split()
>>> print(stuff)
['With', 'three', 'words']
>>> print(len(stuff))
3
>>> print(stuff[0])
With

